# Version 1.0.0 To-Do
- [] Add other to-dos that I want to meet for V1.0.0 release (can create another TODO file for future version to-dos)
- [] Command idea, channel purge, which creates a list containing all of the inputted channel's perms, stores the channel's name and description (if it has one)
    as well as any other settings (like NSFW, announcement or slow mode), then it deletes the original channel and creates a new channel that has the same perms, etc. as the OG
- [] Troubleshoot owner eval command (in the past running it caused the bot to shutdown)
- [x] Remove restart command if it is not feasible
- [] Replace uptime calculator in bot_close in main.py with botUtils one
- [] For commands that had string that I needed to splice (to comply with pep8), test them to make sure spacing is correct
- [] Add sub-help for ban, unban, softban, purge
- [] Add a seperate owners only help menu?
- [] Only include commands in the base help command that are actually useable
- [] Make all files pep8 compliant
- [] Use psutils in about command to get server OS info
    - [] Add text in about command the explains the purpose of this bot?
- [x] Change status_loop.py timeout duration when pushing to production
- [] Make cooldown response auto delete after 30 seconds?
- [] Move self.get_channel in the suggest command in utilities.py to __init__ (so that we don't keep retrieving a channel object)
- [x] Add join position feature to userinfo
- [x] Create a separate command that only tells join position
- [] Add similar functionality to serverinfo like in userinfo (the inserting emoji string) just that this time it will be an emoji for verified or partnered
- [] Convert reload_all command into a subcommand for the regular reload command, will still perform the same logic, just that code readability would be improved (ex: jj reload all)
- [] Convert reload_conf into a subcommand for the regular reload command (ex: jj reload config)
- [] If a cog reload is successful, store the last reloaded cog (somewhere) and then have a command that just reloads that cog, call it reloadlast
- [x] Add a cooldown to the suggest command
    - [x] Reset a user's cooldown if they trigger a too many characters error
- [] Invite command that takes an optional channel arg, # of uses and expiration date (can restrict it so that members are allowed to make invites that are NOT infinite use or ?infinite length?)
- [] Add an ASCII bootup message that says "NBC Boterator" in the big text and in smaller text perhaps "Client is ready"
    Reference: https://github.com/cookkkie/mee6/blob/master/chat-bot/welcome_ascii.txt
- [] Add fun among us bot status references (such as Dyno acting kinda sus)
- [] Test out discord.AllowedMentions, see how it affects cmds like whois + make a mock command that mentions the author and see how changing the Users= setting affects it
    References: https://github.com/Rapptz/RoboDanny/blob/rewrite/bot.py & https://discordpy.readthedocs.io/en/latest/api.html#discord.AllowedMentions
- [x] Bot Status + Presence can be set upon bootup when the Client is declared, do this and move/remove the lines that I have near the end of main.py
- [] Create owner-only bot uptime/downtime status command, will take a few args (status: XX, msg: XX) and send an embed in #boterator-status

(down the line)
- [] Add a way to blacklist a user from sending suggestions (if they're spamming but not triggering the limit)
- [] Add a way to blacklist+whitelist a user from using any bot commands (and to clear the entire blacklist or entire whitelist)
    - [] Figure out how to check for blacklisted users

SPLIT THESE TO-DOS INTO CATEGORIES (such as new feature, bug fix, etc.), AND OUT OF MY GROWING LIST, DECIDE WHAT SHOULD BE IN WHICH RELEASE

ALSO ADD VERSION 1.X.X HEADER(S) FOR FUTURE TO-DOS

# Repo/GitHub To-Do (doesn't correlate to any specific version release)
- [] Create a CONTRIBUTING file (that explains how to contribute to this project, I'm sure there are templates online that I can use, should they also be in a .github folder?)
- [] Use/modify/create templates for issues (can have different ones for different labels)
- [] Use/modify/create templates for PRs
- [x] Create a LICENSE file (decide between 3-Clause BSD & Mozilla)
- [] Automate certain parts of the github flow
    - [] Status Checks (for now just setup the environment, compile the code, lint it with flake8, etc. and ensure that it runs without errors on a few PY versions)
    - [] Draft Releases (auto creates release messages based on PRs that have major, minor, patch labels)
    - [] Deploying?
    - [] Close stale issues (considering how non-consistent my commits are currently, probably not a good idea to add this action)

# Version 1.1.0 To-Do (remember, follow semantic version naming, so adjust version name as needed)
- [] FEATURE: Get the bot to retrieve the latest version tag from the repo for the about command
- [] FEATURE: Add more functionality to joinpos command, @the member that joined before and after.
- [] FEATURE: src command that provides info about # of lines of code, # of files, etc. and that links to the repo
- [] FEATURE: addpartner command, put in admin.py cog
    - [] Plan out design/layout of the embed
    - [] Plan out what args command will takes
    - [] Write cog + add necessary line to config file
- [] FEATURE: Start work on serverinfo command
    - [] Plan out design/layout of the embed
    - [] Display a lot of stats (create a full list of what I want to be in it)
    - [] Most notably server boost status, with a progress bar, which level we have achieved (or None), how many boosts we have and how many boosters we have
- [] Look into clear() function: "Clears the internal state of the bot"
    Reference: https://discordpy.readthedocs.io/en/latest/api.html#discord.Client.clear


# Version 1.X.X To-Do
- [] FEATURE: Custom permissions system; mod, admin, etc. commands will be tied to their corresponding staff roles; use discord permissions as a fallback
    Reference: https://github.com/Rapptz/RoboDanny/blob/rewrite/cogs/utils/checks.py
    - [] Declare IDs in config file
    - [] Read the docs on this topic, shouldn't be too hard to achieve
    - [] Implement into every command that is currently restricted behind some sort of permission
- [] FEATURE: RotatingFileHandler for logging module
    References: https://github.com/Rapptz/RoboDanny/blob/rewrite/launcher.py & https://stackoverflow.com/questions/40088496/how-to-use-pythons-rotatingfilehandler
    - [] Determine a max file size for each .log
    - [] Figure out how to gracefully close handlers as in RoboDanny
    - [] Figure out how to set a logger for each cog: log = logging.getLogger(__name__)